{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\n\n// (이전 상태, 액션) => 다음상태\n// user reducer와 post reducer를 combineReducers로 합침\n// HYDRATE => SSR을 위해 추가\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","arguments","length","undefined","action","type","_objectSpread","payload"],"sources":["/home/kimsuin/study/react/inflearn/next/nodeBird/prepare/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\n\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\n\n// (이전 상태, 액션) => 다음상태\n// user reducer와 post reducer를 combineReducers로 합침\n// HYDRATE => SSR을 위해 추가\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return {\n          ...state,\n          ...action.payload,\n        };\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\nexport default rootReducer;\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,eAAe,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA,IAAMC,WAAW,GAAGD,eAAe,CAAC;EAClCE,KAAK,EAAE,SAAAA,MAAA,EAAwB;IAAA,IAAvBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACxB,QAAQC,MAAM,CAACC,IAAI;MACjB,KAAKX,OAAO;QACV,OAAAY,aAAA,CAAAA,aAAA,KACKN,KAAK,GACLI,MAAM,CAACG,OAAO;MAGrB;QACE,OAAOP,KAAK;IAChB;EACF,CAAC;EACDL,IAAI,EAAJA,IAAI;EACJC,IAAI,EAAJA;AACF,CAAC,CAAC;AAEF,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}