{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../../reducers/user\";\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  } // 성공 결과 -> result.data, 실패 결과 -> err.response.data 에 담겨있음!\n}\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signupAPI() {\n  return axios.post(\"/api/signup\");\n}\nfunction* signUp() {\n  try {\n    // const result = yield call(signupAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      error: err.response.data\n    });\n  }\n}\n\n// while (true){} 를 써야 해당 기능을 계속 사용 가능\n// while (true){} 대신에 takeEvery를 사용\n// takeLatest 실수로 버튼을 여러번 눌리는 경우에 맨 뒤의 요청에 해당하는 응답만 감, 요청을 취소하지는 못함\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]); // fork - 비동기 함수 호출, call - 동기 함수 호출\n}","map":{"version":3,"names":["all","fork","put","delay","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","data","axios","post","logIn","action","type","err","error","response","logoutAPI","logOut","signupAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["/home/kimsuin/study/react/inflearn/next/nodeBird/prepare/front/components/sagas/user.js"],"sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n} from \"../../reducers/user\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  } // 성공 결과 -> result.data, 실패 결과 -> err.response.data 에 담겨있음!\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signupAPI() {\n  return axios.post(\"/api/signup\");\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signupAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      error: err.response.data,\n    });\n  }\n}\n\n// while (true){} 를 써야 해당 기능을 계속 사용 가능\n// while (true){} 대신에 takeEvery를 사용\n// takeLatest 실수로 버튼을 여러번 눌리는 경우에 맨 뒤의 요청에 해당하는 응답만 감, 요청을 취소하지는 못함\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]); // fork - 비동기 함수 호출, call - 동기 함수 호출\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAEC,UAAU,QAAQ,oBAAoB;AACtE,SACEC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,QACV,qBAAqB;AAE5B,SAASC,QAAQA,CAACC,IAAI,EAAE;EACtB,OAAOC,KAAK,CAACC,IAAI,CAAC,YAAY,EAAEF,IAAI,CAAC;AACvC;AAEA,UAAUG,KAAKA,CAACC,MAAM,EAAE;EACtB,IAAI;IACF;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRkB,IAAI,EAAEd,cAAc;MACpBS,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEb,cAAc;MACpBe,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACR;IACtB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASS,SAASA,CAAA,EAAG;EACnB,OAAOR,KAAK,CAACC,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAMA,CAAA,EAAG;EACjB,IAAI;IACF;IACA,MAAMtB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRkB,IAAI,EAAEX;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOY,GAAG,EAAE;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEV,eAAe;MACrBY,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACR;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASW,SAASA,CAAA,EAAG;EACnB,OAAOV,KAAK,CAACC,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUU,MAAMA,CAAA,EAAG;EACjB,IAAI;IACF;IACA,MAAMxB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRkB,IAAI,EAAER;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAER,eAAe;MACrBU,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACR;IACtB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA,UAAUa,UAAUA,CAAA,EAAG;EACrB,MAAMxB,UAAU,CAACC,cAAc,EAAEa,KAAK,CAAC;AACzC;AACA,UAAUW,WAAWA,CAAA,EAAG;EACtB,MAAMzB,UAAU,CAACI,eAAe,EAAEiB,MAAM,CAAC;AAC3C;AACA,UAAUK,WAAWA,CAAA,EAAG;EACtB,MAAM1B,UAAU,CAACO,eAAe,EAAEgB,MAAM,CAAC;AAC3C;AAEA,eAAe,UAAUI,QAAQA,CAAA,EAAG;EAClC,MAAM/B,GAAG,CAAC,CAACC,IAAI,CAAC2B,UAAU,CAAC,EAAE3B,IAAI,CAAC4B,WAAW,CAAC,EAAE5B,IAAI,CAAC6B,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE","ignoreList":[]},"metadata":{},"sourceType":"module"}