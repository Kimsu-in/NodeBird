{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  } // 성공 결과 -> result.data, 실패 결과 -> err.response.data 에 담겨있음!\n}\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\"\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n// while (true){} 를 써야 해당 기능을 계속 사용 가능\n// while (true){} 대신에 takeEvery를 사용\n// takeLatest 실수로 버튼을 여러번 눌리는 경우에 맨 뒤의 요청에 해당하는 응답만 감, 요청을 취소하지는 못함\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]); // fork - 비동기 함수 호출, call - 동기 함수 호출\n}","map":{"version":3,"names":["all","fork","put","delay","takeLatest","loginAPI","data","axios","post","logIn","action","type","err","response","logoutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"sources":["/home/kimsuin/study/react/inflearn/next/nodeBird/prepare/front/components/sagas/user.js"],"sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  } // 성공 결과 -> result.data, 실패 결과 -> err.response.data 에 담겨있음!\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logoutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n// while (true){} 를 써야 해당 기능을 계속 사용 가능\n// while (true){} 대신에 takeEvery를 사용\n// takeLatest 실수로 버튼을 여러번 눌리는 경우에 맨 뒤의 요청에 해당하는 응답만 감, 요청을 취소하지는 못함\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]); // fork - 비동기 함수 호출, call - 동기 함수 호출\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAEC,UAAU,QAAQ,oBAAoB;AAEtE,SAASC,QAAQA,CAACC,IAAI,EAAE;EACtB,OAAOC,KAAK,CAACC,IAAI,CAAC,YAAY,EAAEF,IAAI,CAAC;AACvC;AAEA,UAAUG,KAAKA,CAACC,MAAM,EAAE;EACtB,IAAI;IACF;IACA,MAAMP,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRS,IAAI,EAAE,gBAAgB;MACtBL,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMV,GAAG,CAAC;MACRS,IAAI,EAAE,gBAAgB;MACtBL,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASQ,SAASA,CAAA,EAAG;EACnB,OAAOP,KAAK,CAACC,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUO,MAAMA,CAAA,EAAG;EACjB,IAAI;IACF;IACA,MAAMZ,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRS,IAAI,EAAE;MACN;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMV,GAAG,CAAC;MACRS,IAAI,EAAE,iBAAiB;MACvBL,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA,UAAUU,UAAUA,CAAA,EAAG;EACrB,MAAMZ,UAAU,CAAC,gBAAgB,EAAEK,KAAK,CAAC;AAC3C;AACA,UAAUQ,WAAWA,CAAA,EAAG;EACtB,MAAMb,UAAU,CAAC,iBAAiB,EAAEW,MAAM,CAAC;AAC7C;AAEA,eAAe,UAAUG,QAAQA,CAAA,EAAG;EAClC,MAAMlB,GAAG,CAAC,CAACC,IAAI,CAACe,UAAU,CAAC,EAAEf,IAAI,CAACgB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module"}