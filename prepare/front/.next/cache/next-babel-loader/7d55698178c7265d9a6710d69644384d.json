{"ast":null,"code":"import { put, takeLatest, delay, all, fork } from \"redux-saga/effects\";\nimport shortId, { generate } from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../../reducers/user\";\nfunction loadPostsAPI() {\n  return axios.get(\"/api/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.log(err.response.data);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addPostAPI() {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI() {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["put","takeLatest","delay","all","fork","shortId","generate","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","axios","get","data","loadPosts","action","id","type","err","console","log","response","error","addPostAPI","post","addPost","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/home/kimsuin/study/react/inflearn/next/nodeBird/prepare/front/components/sagas/post.js"],"sourcesContent":["import { put, takeLatest, delay, all, fork } from \"redux-saga/effects\";\nimport shortId, { generate } from \"shortid\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  generateDummyPost,\n} from \"../../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../../reducers/user\";\n\nfunction loadPostsAPI() {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.log(err.response.data);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}