{"ast":null,"code":"import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    id: shortId.generate(),\n    src: \"https://loremflickr.com/1280/720\"\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const loadPosts = data => ({\n  type: LOAD_POSTS_REQUEST,\n  data\n});\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const removePost = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"수인\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"수인\"\n  }\n});\n\n// reducer 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts.action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에 붙여야 게시물 제일 앞에 올라감.\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.data;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","loadPosts","data","type","addPost","removePost","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","hasMorePost","length","error","unshift","filter","v","post","find","postId"],"sources":["/home/kimsuin/study/react/inflearn/next/nodeBird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          id: shortId.generate(),\n          src: \"https://loremflickr.com/1280/720\",\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const loadPosts = (data) => ({\n  type: LOAD_POSTS_REQUEST,\n  data,\n});\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const removePost = (data) => ({\n  type: REMOVE_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"수인\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"수인\",\n  },\n});\n\n// reducer 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts.action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에 붙여야 게시물 제일 앞에 올라감.\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.data;\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}