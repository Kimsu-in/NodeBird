{"ast":null,"code":"import { put, takeLatest, delay, all, fork } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI() {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {}\n    });\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["put","takeLatest","delay","all","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","shortid","addPostAPI","axios","post","data","addPost","action","id","shortId","generate","type","err","error","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["/home/kimsuin/study/react/inflearn/next/nodeBird/prepare/front/components/sagas/post.js"],"sourcesContent":["import { put, takeLatest, delay, all, fork } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n} from \"../../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {},\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,UAAU,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AACtE,SACEC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QACd,qBAAqB;AAC5B,SAASC,cAAc,QAAQ,qBAAqB;AACpD,OAAOC,OAAO,MAAM,SAAS;AAE7B,SAASC,UAAUA,CAAA,EAAG;EACpB,OAAOC,KAAK,CAACC,IAAI,CAAC,WAAW,EAAEC,IAAI,CAAC;AACtC;AAEA,UAAUC,OAAOA,CAACC,MAAM,EAAE;EACxB,IAAI;IACF;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMiB,EAAE,GAAGC,OAAO,CAACC,QAAQ,CAAC,CAAC;IAC7B,MAAMrB,GAAG,CAAC;MACRsB,IAAI,EAAEhB,gBAAgB;MACtBU,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;IACF,MAAMhB,GAAG,CAAC;MACRsB,IAAI,EAAEX;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOY,GAAG,EAAE;IACZ,MAAMvB,GAAG,CAAC;MACRsB,IAAI,EAAEf,gBAAgB;MACtBiB,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASU,aAAaA,CAAA,EAAG;EACvB,OAAOZ,KAAK,CAACC,IAAI,CAAC,aAAaC,IAAI,CAACW,MAAM,UAAU,EAAEX,IAAI,CAAC;AAC7D;AAEA,UAAUY,UAAUA,CAACV,MAAM,EAAE;EAC3B,IAAI;IACF;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMF,GAAG,CAAC;MACRsB,IAAI,EAAEb,mBAAmB;MACzBO,IAAI,EAAEE,MAAM,CAACF;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMvB,GAAG,CAAC;MACRsB,IAAI,EAAEZ,mBAAmB;MACzBc,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUa,YAAYA,CAAA,EAAG;EACvB,MAAM5B,UAAU,CAACI,gBAAgB,EAAEY,OAAO,CAAC;AAC7C;AACA,UAAUa,eAAeA,CAAA,EAAG;EAC1B,MAAM7B,UAAU,CAACO,mBAAmB,EAAEoB,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUG,QAAQA,CAAA,EAAG;EAClC,MAAM5B,GAAG,CAAC,CAACC,IAAI,CAACyB,YAAY,CAAC,EAAEzB,IAAI,CAAC0B,eAAe,CAAC,CAAC,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module"}